{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","val","update","id_val","id_update","text","textUpdate","style","textAlign","className","onClick","del","event","target","id","prevValue","map","elemnt","key","type","onChange","value","placeholder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOA2DeA,MAtDf,WAAgB,IAAD,EAEMC,mBAAS,IAFf,mBAERC,EAFQ,KAEJC,EAFI,OAGYF,mBAAS,GAHrB,mBAGRG,EAHQ,KAGDC,EAHC,OAIWJ,mBAAS,IAJpB,mBAIRK,EAJQ,KAIHC,EAJG,KAmCb,OACE,qCACA,oBAAIC,MAAO,CAACC,UAAU,UAAWC,UAAU,OAA3C,uBACA,qBAAKA,UAAY,MAAjB,SACA,sBAAKA,UAAU,UAAf,UACA,oBAAIA,UAAU,OAAd,mBACA,qBAAKA,UAAU,UAAUC,QA/B7B,WAQA,SAASC,EAAIC,GACRA,EAAMC,OAAOC,IACdZ,GAAO,SAACa,GASN,OARAA,EAAYA,EAAUC,KAAI,SAACC,GAC1B,OAAGL,EAAMC,OAAOC,IAAMG,EAAOC,IACpBD,EAGA,SAfF,KAATZ,IACHC,EAAW,IACXF,GAAU,SAAAW,GAAS,OAAEA,EAAU,KAC/Bb,GAAO,SAACa,GACP,MAAM,GAAN,mBAAWA,GAAX,CAAsB,sBAAKL,QAASC,EAAKF,UAAU,eAA7B,UAAyD,mBAAGA,UAAU,uBAAuBK,GAAIX,GAAaA,GAA9G,IAA4HE,IAA3EF,UA0BtE,SACA,sBAAKM,UAAU,gBAAf,UACA,uBAAOA,UAAU,YAAYU,KAAK,OAAOC,SArC7C,SAAoBR,GAClBN,EAAWM,EAAMC,OAAOQ,QAoCyCA,MAAOhB,EAAMiB,YAAY,kBACxF,qBAAKb,UAAU,aAAf,SAA4B,mBAAGA,UAAU,wCAGxCR,WCxCUsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f630c108.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\n\n\nfunction App() {\n  \n  let [val,update] = useState([]);\n  let [id_val,id_update] = useState(0);\n  let [text,textUpdate] = useState(\"\");\n\nfunction textChange(event){\n  textUpdate(event.target.value);\n}  \n\nfunction add(){\n  if(text !== \"\"){\n  textUpdate(\"\");\n  id_update(prevValue=>prevValue+1);\n  update((prevValue)=>{\n   return [...prevValue, <div onClick={del} className=\"div-content \" key={id_val}><i className=\"fas fa-trash-alt del\" id={id_val} key={id_val}></i> {text}</div>];\n    });\n}\nfunction del(event){\n  if(event.target.id){\n    update((prevValue)=>{\n      prevValue = prevValue.map((elemnt)=>{\n       if(event.target.id != elemnt.key){\n         return elemnt;\n       }\n       else{\n         return \"\";\n       }\n      });\n      return prevValue;\n    });\n  }}\n}\n\n\n  return (\n    <>\n    <h1 style={{textAlign:\"center\"}} className=\"main\">TO DO APP</h1>\n    <div className = \"box\">\n    <div className=\"add-box\">\n    <h1 className=\"entr\">Entry</h1>\n    <div className=\"add-bar\" onClick={add}>\n    <div className=\"entry-element\">\n    <input className=\"input-bar\" type=\"text\" onChange={textChange} value={text} placeholder=\"Entry Here...\"/>\n    <div className=\"entry-icon\"><i className=\"fas fa-plus-circle main-icon\"></i></div>\n    </div>\n    </div>\n    {val}\n    </div>\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}